
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightUNOTleftEQUALIZATIONSIGNDIFFERENTIATIONSIGNleftGREATERTHANSMALLERTHANGREATEREQUALLESSEQUALleftPLUSMINUSleftPORDIVIDEMODULATEleftPOTrightMINUSAND CADENA COMA COMMENMUL COMMENUNI DIFFERENTIATIONSIGN DIVIDE DOSPUNTOS EQUALIZATIONSIGN EQUALS FLOAT GREATEREQUAL GREATERTHAN ID INTEGER KEYSIGNCLOSE KEYSIGNOPEN LESSEQUAL MINUS MODULATE NOT OR PARDER PARIZQ PLUS POR POT RBOOL RFALSE RFLOAT RFUNC RINT RLIST RMAIN RNONE RPRINT RSTRING RSTRUCT RTRUE SALTOLINEA SMALLERTHANinit     : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : print_instr finins\n                        | asignacion_instr  finins\n                        | definicion_asignacion_instr finins\n    finins       : SALTOLINEA\n                    | instruccion  : error fininsprint_instr  : RPRINT PARIZQ expres_lista PARDERasignacion_instr  : ID EQUALS expresiondefinicion_asignacion_instr  : ID  DOSPUNTOS tipo EQUALS expresion\n    expresion   :   expresion PLUS      expresion\n                |   expresion MINUS     expresion\n                |   expresion POR       expresion\n                |   expresion DIVIDE    expresion\n                |   expresion MODULATE  expresion\n                |   expresion_number\n    \n    expresion   :   expresion OR      expresion\n                |   expresion AND     expresion\n    \n        expresion : NOT expresion %prec UNOT\n    expres_lista  : expres_lista COMA expresion\n                     | expresionexpresion  :   PARIZQ expresion PARDERexpresion  : CADENAexpresion  : RTRUE\n                  | RFALSEexpresion  :   ID\n    tipo    : RINT\n            | RFLOAT\n            | RBOOL\n\n    \n    expresion_number    :   INTEGER\n                        |   FLOAT\n    '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,10,11,12,13,14,15,22,24,25,26,27,28,29,30,36,45,47,49,50,51,52,53,54,55,56,],[7,7,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,-18,-25,-26,-27,-28,-32,-33,-11,-10,-21,-24,-13,-14,-15,-16,-17,-19,-20,-12,]),'RPRINT':([0,2,3,4,5,6,7,10,11,12,13,14,15,22,24,25,26,27,28,29,30,36,45,47,49,50,51,52,53,54,55,56,],[8,8,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,-18,-25,-26,-27,-28,-32,-33,-11,-10,-21,-24,-13,-14,-15,-16,-17,-19,-20,-12,]),'ID':([0,2,3,4,5,6,7,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,29,30,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,],[9,9,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,27,27,27,-18,27,-25,-26,-27,-28,-32,-33,-11,-10,27,27,27,27,27,27,27,27,-21,27,-24,-13,-14,-15,-16,-17,-19,-20,-12,]),'$end':([1,2,3,4,5,6,7,10,11,12,13,14,15,22,24,25,26,27,28,29,30,36,45,47,49,50,51,52,53,54,55,56,],[0,-1,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,-18,-25,-26,-27,-28,-32,-33,-11,-10,-21,-24,-13,-14,-15,-16,-17,-19,-20,-12,]),'SALTOLINEA':([4,5,6,7,22,24,25,26,27,28,29,30,36,45,47,49,50,51,52,53,54,55,56,],[12,12,12,12,-18,-25,-26,-27,-28,-32,-33,-11,-10,-21,-24,-13,-14,-15,-16,-17,-19,-20,-12,]),'PARIZQ':([8,16,17,19,23,37,38,39,40,41,42,43,44,46,],[16,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EQUALS':([9,31,32,33,34,],[17,46,-29,-30,-31,]),'DOSPUNTOS':([9,],[18,]),'NOT':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[23,23,23,23,23,23,23,23,23,23,23,23,23,]),'CADENA':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[24,24,24,24,24,24,24,24,24,24,24,24,24,]),'RTRUE':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[25,25,25,25,25,25,25,25,25,25,25,25,25,]),'RFALSE':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[26,26,26,26,26,26,26,26,26,26,26,26,26,]),'INTEGER':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FLOAT':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[29,29,29,29,29,29,29,29,29,29,29,29,29,]),'RINT':([18,],[32,]),'RFLOAT':([18,],[33,]),'RBOOL':([18,],[34,]),'PARDER':([20,21,22,24,25,26,27,28,29,35,45,47,48,49,50,51,52,53,54,55,],[36,-23,-18,-25,-26,-27,-28,-32,-33,47,-21,-24,-22,-13,-14,-15,-16,-17,-19,-20,]),'COMA':([20,21,22,24,25,26,27,28,29,45,47,48,49,50,51,52,53,54,55,],[37,-23,-18,-25,-26,-27,-28,-32,-33,-21,-24,-22,-13,-14,-15,-16,-17,-19,-20,]),'PLUS':([21,22,24,25,26,27,28,29,30,35,45,47,48,49,50,51,52,53,54,55,56,],[38,-18,-25,-26,-27,-28,-32,-33,38,38,38,-24,38,-13,-14,-15,-16,-17,38,38,38,]),'MINUS':([21,22,24,25,26,27,28,29,30,35,45,47,48,49,50,51,52,53,54,55,56,],[39,-18,-25,-26,-27,-28,-32,-33,39,39,39,-24,39,-13,-14,-15,-16,-17,39,39,39,]),'POR':([21,22,24,25,26,27,28,29,30,35,45,47,48,49,50,51,52,53,54,55,56,],[40,-18,-25,-26,-27,-28,-32,-33,40,40,40,-24,40,40,40,-15,-16,-17,40,40,40,]),'DIVIDE':([21,22,24,25,26,27,28,29,30,35,45,47,48,49,50,51,52,53,54,55,56,],[41,-18,-25,-26,-27,-28,-32,-33,41,41,41,-24,41,41,41,-15,-16,-17,41,41,41,]),'MODULATE':([21,22,24,25,26,27,28,29,30,35,45,47,48,49,50,51,52,53,54,55,56,],[42,-18,-25,-26,-27,-28,-32,-33,42,42,42,-24,42,42,42,-15,-16,-17,42,42,42,]),'OR':([21,22,24,25,26,27,28,29,30,35,45,47,48,49,50,51,52,53,54,55,56,],[43,-18,-25,-26,-27,-28,-32,-33,43,43,-21,-24,43,-13,-14,-15,-16,-17,-19,-20,43,]),'AND':([21,22,24,25,26,27,28,29,30,35,45,47,48,49,50,51,52,53,54,55,56,],[44,-18,-25,-26,-27,-28,-32,-33,44,44,-21,-24,44,-13,-14,-15,-16,-17,44,-20,44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,10,]),'print_instr':([0,2,],[4,4,]),'asignacion_instr':([0,2,],[5,5,]),'definicion_asignacion_instr':([0,2,],[6,6,]),'finins':([4,5,6,7,],[11,13,14,15,]),'expres_lista':([16,],[20,]),'expresion':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[21,30,35,45,48,49,50,51,52,53,54,55,56,]),'expresion_number':([16,17,19,23,37,38,39,40,41,42,43,44,46,],[22,22,22,22,22,22,22,22,22,22,22,22,22,]),'tipo':([18,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',214),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_instrucciones_instruccion','grammar.py',218),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',224),
  ('instruccion -> print_instr finins','instruccion',2,'p_instruccion','grammar.py',233),
  ('instruccion -> asignacion_instr finins','instruccion',2,'p_instruccion','grammar.py',234),
  ('instruccion -> definicion_asignacion_instr finins','instruccion',2,'p_instruccion','grammar.py',235),
  ('finins -> SALTOLINEA','finins',1,'p_finins','grammar.py',240),
  ('finins -> <empty>','finins',0,'p_finins','grammar.py',241),
  ('instruccion -> error finins','instruccion',2,'p_instruccion_error','grammar.py',246),
  ('print_instr -> RPRINT PARIZQ expres_lista PARDER','print_instr',4,'p_print_instr','grammar.py',252),
  ('asignacion_instr -> ID EQUALS expresion','asignacion_instr',3,'p_asignacion_instr','grammar.py',257),
  ('definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion','definicion_asignacion_instr',5,'p_definicion_asginacion','grammar.py',261),
  ('expresion -> expresion PLUS expresion','expresion',3,'p_expresion_binaria','grammar.py',267),
  ('expresion -> expresion MINUS expresion','expresion',3,'p_expresion_binaria','grammar.py',268),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','grammar.py',269),
  ('expresion -> expresion DIVIDE expresion','expresion',3,'p_expresion_binaria','grammar.py',270),
  ('expresion -> expresion MODULATE expresion','expresion',3,'p_expresion_binaria','grammar.py',271),
  ('expresion -> expresion_number','expresion',1,'p_expresion_binaria','grammar.py',272),
  ('expresion -> expresion OR expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',314),
  ('expresion -> expresion AND expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',315),
  ('expresion -> NOT expresion','expresion',2,'p_expresion_unaria_Logica','grammar.py',327),
  ('expres_lista -> expres_lista COMA expresion','expres_lista',3,'p_expresion_lista','grammar.py',334),
  ('expres_lista -> expresion','expres_lista',1,'p_expresion_lista','grammar.py',335),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_agrupacion','grammar.py',344),
  ('expresion -> CADENA','expresion',1,'p_expresion_cadena','grammar.py',349),
  ('expresion -> RTRUE','expresion',1,'p_expresion_booleanos','grammar.py',354),
  ('expresion -> RFALSE','expresion',1,'p_expresion_booleanos','grammar.py',355),
  ('expresion -> ID','expresion',1,'p_expresion_id','grammar.py',363),
  ('tipo -> RINT','tipo',1,'p_tipo','grammar.py',369),
  ('tipo -> RFLOAT','tipo',1,'p_tipo','grammar.py',370),
  ('tipo -> RBOOL','tipo',1,'p_tipo','grammar.py',371),
  ('expresion_number -> INTEGER','expresion_number',1,'p_expresion_number','grammar.py',379),
  ('expresion_number -> FLOAT','expresion_number',1,'p_expresion_number','grammar.py',380),
]
