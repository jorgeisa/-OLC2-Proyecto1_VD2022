
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CADENA COMA COMMENMUL COMMENUNI DIFFERENTIATIONSIGN DIVIDE DOSPUNTOS EQUALIZATIONSIGN EQUALS FLOAT GREATEREQUAL GREATERTHAN ID INTEGER LESSEQUAL MINUS MODULATE PARDER PARIZQ PLUS POR POT RBOOL RFALSE RFLOAT RINT RLIST RNONE RPRINT RSTRING RSTRUCT RTRUE SALTOLINEA SMALLERTHANinit     : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : print_instr finins\n                        | asignacion_instr  finins\n                        | definicion_asignacion_instr finins\n    finins       : SALTOLINEA\n                    | instruccion  : error fininsprint_instr  : RPRINT PARIZQ expres_lista PARDERasignacion_instr  : ID EQUALS expresiondefinicion_asignacion_instr  : ID  DOSPUNTOS tipo EQUALS expresion\n    expresion   :   expresion PLUS      expresion\n                |   expresion MINUS     expresion\n                |   expresion POR       expresion\n                |   expresion DIVIDE    expresion\n                |   expresion MODULATE  expresion\n    \n    expresion   :   expresion EQUALIZATIONSIGN      expresion\n                |   expresion DIFFERENTIATIONSIGN     expresion\n                |   expresion SMALLERTHAN       expresion\n                |   expresion GREATERTHAN    expresion\n                |   expresion LESSEQUAL  expresion\n                |   expresion GREATEREQUAL  expresion\n    expres_lista  : expres_lista COMA expresion\n                     | expresionexpresion  :   PARIZQ expresion PARDERexpresion  : CADENAexpresion  : RTRUE\n                  | RFALSEexpresion  :   ID\n    tipo    : INTEGER\n            | FLOAT\n    \n    expresion   :   INTEGER\n                |   FLOAT\n    '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,10,11,12,13,14,15,22,23,24,25,26,27,28,33,47,49,50,51,52,53,54,55,56,57,58,59,60,],[7,7,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,-27,-28,-29,-30,-33,-34,-11,-10,-26,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-12,]),'RPRINT':([0,2,3,4,5,6,7,10,11,12,13,14,15,22,23,24,25,26,27,28,33,47,49,50,51,52,53,54,55,56,57,58,59,60,],[8,8,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,-27,-28,-29,-30,-33,-34,-11,-10,-26,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-12,]),'ID':([0,2,3,4,5,6,7,10,11,12,13,14,15,16,17,19,22,23,24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,],[9,9,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,25,25,25,-27,-28,-29,-30,-33,-34,-11,-10,25,25,25,25,25,25,25,25,25,25,25,25,25,-26,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-12,]),'$end':([1,2,3,4,5,6,7,10,11,12,13,14,15,22,23,24,25,26,27,28,33,47,49,50,51,52,53,54,55,56,57,58,59,60,],[0,-1,-3,-8,-8,-8,-8,-2,-4,-7,-5,-6,-9,-27,-28,-29,-30,-33,-34,-11,-10,-26,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-12,]),'SALTOLINEA':([4,5,6,7,22,23,24,25,26,27,28,33,47,49,50,51,52,53,54,55,56,57,58,59,60,],[12,12,12,12,-27,-28,-29,-30,-33,-34,-11,-10,-26,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-12,]),'PARIZQ':([8,16,17,19,34,35,36,37,38,39,40,41,42,43,44,45,46,],[16,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'EQUALS':([9,29,30,31,],[17,46,-31,-32,]),'DOSPUNTOS':([9,],[18,]),'CADENA':([16,17,19,34,35,36,37,38,39,40,41,42,43,44,45,46,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'RTRUE':([16,17,19,34,35,36,37,38,39,40,41,42,43,44,45,46,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'RFALSE':([16,17,19,34,35,36,37,38,39,40,41,42,43,44,45,46,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'INTEGER':([16,17,18,19,34,35,36,37,38,39,40,41,42,43,44,45,46,],[26,26,30,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'FLOAT':([16,17,18,19,34,35,36,37,38,39,40,41,42,43,44,45,46,],[27,27,31,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'PARDER':([20,21,22,23,24,25,26,27,32,47,48,49,50,51,52,53,54,55,56,57,58,59,],[33,-25,-27,-28,-29,-30,-33,-34,47,-26,-24,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,]),'COMA':([20,21,22,23,24,25,26,27,47,48,49,50,51,52,53,54,55,56,57,58,59,],[34,-25,-27,-28,-29,-30,-33,-34,-26,-24,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,]),'PLUS':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[35,-27,-28,-29,-30,-33,-34,35,35,-26,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'MINUS':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[36,-27,-28,-29,-30,-33,-34,36,36,-26,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'POR':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[37,-27,-28,-29,-30,-33,-34,37,37,-26,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'DIVIDE':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[38,-27,-28,-29,-30,-33,-34,38,38,-26,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'MODULATE':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[39,-27,-28,-29,-30,-33,-34,39,39,-26,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'EQUALIZATIONSIGN':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[40,-27,-28,-29,-30,-33,-34,40,40,-26,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'DIFFERENTIATIONSIGN':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[41,-27,-28,-29,-30,-33,-34,41,41,-26,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'SMALLERTHAN':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[42,-27,-28,-29,-30,-33,-34,42,42,-26,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'GREATERTHAN':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[43,-27,-28,-29,-30,-33,-34,43,43,-26,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'LESSEQUAL':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[44,-27,-28,-29,-30,-33,-34,44,44,-26,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'GREATEREQUAL':([21,22,23,24,25,26,27,28,32,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[45,-27,-28,-29,-30,-33,-34,45,45,-26,45,45,45,45,45,45,45,45,45,45,45,45,45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,10,]),'print_instr':([0,2,],[4,4,]),'asignacion_instr':([0,2,],[5,5,]),'definicion_asignacion_instr':([0,2,],[6,6,]),'finins':([4,5,6,7,],[11,13,14,15,]),'expres_lista':([16,],[20,]),'expresion':([16,17,19,34,35,36,37,38,39,40,41,42,43,44,45,46,],[21,28,32,48,49,50,51,52,53,54,55,56,57,58,59,60,]),'tipo':([18,],[29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',186),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_instrucciones_instruccion','grammar.py',190),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',196),
  ('instruccion -> print_instr finins','instruccion',2,'p_instruccion','grammar.py',205),
  ('instruccion -> asignacion_instr finins','instruccion',2,'p_instruccion','grammar.py',206),
  ('instruccion -> definicion_asignacion_instr finins','instruccion',2,'p_instruccion','grammar.py',207),
  ('finins -> SALTOLINEA','finins',1,'p_finins','grammar.py',212),
  ('finins -> <empty>','finins',0,'p_finins','grammar.py',213),
  ('instruccion -> error finins','instruccion',2,'p_instruccion_error','grammar.py',218),
  ('print_instr -> RPRINT PARIZQ expres_lista PARDER','print_instr',4,'p_print_instr','grammar.py',224),
  ('asignacion_instr -> ID EQUALS expresion','asignacion_instr',3,'p_asignacion_instr','grammar.py',229),
  ('definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion','definicion_asignacion_instr',5,'p_definicion_asginacion','grammar.py',233),
  ('expresion -> expresion PLUS expresion','expresion',3,'p_expresion_binaria','grammar.py',239),
  ('expresion -> expresion MINUS expresion','expresion',3,'p_expresion_binaria','grammar.py',240),
  ('expresion -> expresion POR expresion','expresion',3,'p_expresion_binaria','grammar.py',241),
  ('expresion -> expresion DIVIDE expresion','expresion',3,'p_expresion_binaria','grammar.py',242),
  ('expresion -> expresion MODULATE expresion','expresion',3,'p_expresion_binaria','grammar.py',243),
  ('expresion -> expresion EQUALIZATIONSIGN expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',254),
  ('expresion -> expresion DIFFERENTIATIONSIGN expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',255),
  ('expresion -> expresion SMALLERTHAN expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',256),
  ('expresion -> expresion GREATERTHAN expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',257),
  ('expresion -> expresion LESSEQUAL expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',258),
  ('expresion -> expresion GREATEREQUAL expresion','expresion',3,'p_expresion_binaria_relacional','grammar.py',259),
  ('expres_lista -> expres_lista COMA expresion','expres_lista',3,'p_expresion_lista','grammar.py',277),
  ('expres_lista -> expresion','expres_lista',1,'p_expresion_lista','grammar.py',278),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_agrupacion','grammar.py',287),
  ('expresion -> CADENA','expresion',1,'p_expresion_cadena','grammar.py',292),
  ('expresion -> RTRUE','expresion',1,'p_expresion_booleanos','grammar.py',297),
  ('expresion -> RFALSE','expresion',1,'p_expresion_booleanos','grammar.py',298),
  ('expresion -> ID','expresion',1,'p_expresion_id','grammar.py',306),
  ('tipo -> INTEGER','tipo',1,'p_tipo','grammar.py',312),
  ('tipo -> FLOAT','tipo',1,'p_tipo','grammar.py',313),
  ('expresion -> INTEGER','expresion',1,'p_expresion_number','grammar.py',320),
  ('expresion -> FLOAT','expresion',1,'p_expresion_number','grammar.py',321),
]
