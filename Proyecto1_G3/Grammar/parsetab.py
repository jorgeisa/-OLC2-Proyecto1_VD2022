
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CADENA ID PARDER PARIZQ RPRINT SALTOLINEAinit     : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccioninstruccion      : print_instr fininsfinins       : SALTOLINEA\n                    | instruccion  : error SALTOLINEAprint_instr  : RPRINT PARIZQ expresion PARDERexpresion  : CADENA'
    
_lr_action_items = {'error':([0,2,3,4,7,8,9,10,14,],[5,5,-3,-6,-2,-4,-5,-7,-8,]),'RPRINT':([0,2,3,4,7,8,9,10,14,],[6,6,-3,-6,-2,-4,-5,-7,-8,]),'$end':([1,2,3,4,7,8,9,10,14,],[0,-1,-3,-6,-2,-4,-5,-7,-8,]),'SALTOLINEA':([4,5,14,],[9,10,-8,]),'PARIZQ':([6,],[11,]),'CADENA':([11,],[13,]),'PARDER':([12,13,],[14,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,],[2,]),'instruccion':([0,2,],[3,7,]),'print_instr':([0,2,],[4,4,]),'finins':([4,],[8,]),'expresion':([11,],[12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','grammar.py',63),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_instrucciones_instruccion','grammar.py',67),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','grammar.py',73),
  ('instruccion -> print_instr finins','instruccion',2,'p_instruccion','grammar.py',82),
  ('finins -> SALTOLINEA','finins',1,'p_finins','grammar.py',86),
  ('finins -> <empty>','finins',0,'p_finins','grammar.py',87),
  ('instruccion -> error SALTOLINEA','instruccion',2,'p_instruccion_error','grammar.py',91),
  ('print_instr -> RPRINT PARIZQ expresion PARDER','print_instr',4,'p_print_instr','grammar.py',97),
  ('expresion -> CADENA','expresion',1,'p_expresion_cadena','grammar.py',101),
]
