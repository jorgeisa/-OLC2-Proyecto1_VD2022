Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENMUL
    COMMENUNI
    DIFFERENTIATIONSIGN
    EQUALIZATIONSIGN
    GREATEREQUAL
    GREATERTHAN
    KEYSIGNCLOSE
    KEYSIGNOPEN
    LESSEQUAL
    POT
    RFUNC
    RLIST
    RMAIN
    RNONE
    RSTRING
    RSTRUCT
    SMALLERTHAN

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print_instr finins
Rule 5     instruccion -> asignacion_instr finins
Rule 6     instruccion -> definicion_asignacion_instr finins
Rule 7     finins -> SALTOLINEA
Rule 8     finins -> <empty>
Rule 9     instruccion -> error finins
Rule 10    print_instr -> RPRINT PARIZQ expres_lista PARDER
Rule 11    asignacion_instr -> ID EQUALS expresion
Rule 12    definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion
Rule 13    expresion -> expresion PLUS expresion
Rule 14    expresion -> expresion MINUS expresion
Rule 15    expresion -> expresion POR expresion
Rule 16    expresion -> expresion DIVIDE expresion
Rule 17    expresion -> expresion MODULATE expresion
Rule 18    expresion -> expresion_number
Rule 19    expresion -> expresion OR expresion
Rule 20    expresion -> expresion AND expresion
Rule 21    expresion -> NOT expresion
Rule 22    expres_lista -> expres_lista COMA expresion
Rule 23    expres_lista -> expresion
Rule 24    expresion -> PARIZQ expresion PARDER
Rule 25    expresion -> CADENA
Rule 26    expresion -> RTRUE
Rule 27    expresion -> RFALSE
Rule 28    expresion -> ID
Rule 29    tipo -> RINT
Rule 30    tipo -> RFLOAT
Rule 31    tipo -> RBOOL
Rule 32    expresion_number -> INTEGER
Rule 33    expresion_number -> FLOAT

Terminals, with rules where they appear

AND                  : 20
CADENA               : 25
COMA                 : 22
COMMENMUL            : 
COMMENUNI            : 
DIFFERENTIATIONSIGN  : 
DIVIDE               : 16
DOSPUNTOS            : 12
EQUALIZATIONSIGN     : 
EQUALS               : 11 12
FLOAT                : 33
GREATEREQUAL         : 
GREATERTHAN          : 
ID                   : 11 12 28
INTEGER              : 32
KEYSIGNCLOSE         : 
KEYSIGNOPEN          : 
LESSEQUAL            : 
MINUS                : 14
MODULATE             : 17
NOT                  : 21
OR                   : 19
PARDER               : 10 24
PARIZQ               : 10 24
PLUS                 : 13
POR                  : 15
POT                  : 
RBOOL                : 31
RFALSE               : 27
RFLOAT               : 30
RFUNC                : 
RINT                 : 29
RLIST                : 
RMAIN                : 
RNONE                : 
RPRINT               : 10
RSTRING              : 
RSTRUCT              : 
RTRUE                : 26
SALTOLINEA           : 7
SMALLERTHAN          : 
error                : 9

Nonterminals, with rules where they appear

asignacion_instr     : 5
definicion_asignacion_instr : 6
expres_lista         : 10 22
expresion            : 11 12 13 13 14 14 15 15 16 16 17 17 19 19 20 20 21 22 23 24
expresion_number     : 18
finins               : 4 5 6 9
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2
print_instr          : 4
tipo                 : 12

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr finins
    (5) instruccion -> . asignacion_instr finins
    (6) instruccion -> . definicion_asignacion_instr finins
    (9) instruccion -> . error finins
    (10) print_instr -> . RPRINT PARIZQ expres_lista PARDER
    (11) asignacion_instr -> . ID EQUALS expresion
    (12) definicion_asignacion_instr -> . ID DOSPUNTOS tipo EQUALS expresion

    error           shift and go to state 7
    RPRINT          shift and go to state 8
    ID              shift and go to state 9

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4
    asignacion_instr               shift and go to state 5
    definicion_asignacion_instr    shift and go to state 6

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_instr finins
    (5) instruccion -> . asignacion_instr finins
    (6) instruccion -> . definicion_asignacion_instr finins
    (9) instruccion -> . error finins
    (10) print_instr -> . RPRINT PARIZQ expres_lista PARDER
    (11) asignacion_instr -> . ID EQUALS expresion
    (12) definicion_asignacion_instr -> . ID DOSPUNTOS tipo EQUALS expresion

    $end            reduce using rule 1 (init -> instrucciones .)
    error           shift and go to state 7
    RPRINT          shift and go to state 8
    ID              shift and go to state 9

    instruccion                    shift and go to state 10
    print_instr                    shift and go to state 4
    asignacion_instr               shift and go to state 5
    definicion_asignacion_instr    shift and go to state 6

state 3

    (3) instrucciones -> instruccion .

    error           reduce using rule 3 (instrucciones -> instruccion .)
    RPRINT          reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print_instr . finins
    (7) finins -> . SALTOLINEA
    (8) finins -> .

    SALTOLINEA      shift and go to state 12
    error           reduce using rule 8 (finins -> .)
    RPRINT          reduce using rule 8 (finins -> .)
    ID              reduce using rule 8 (finins -> .)
    $end            reduce using rule 8 (finins -> .)

    finins                         shift and go to state 11

state 5

    (5) instruccion -> asignacion_instr . finins
    (7) finins -> . SALTOLINEA
    (8) finins -> .

    SALTOLINEA      shift and go to state 12
    error           reduce using rule 8 (finins -> .)
    RPRINT          reduce using rule 8 (finins -> .)
    ID              reduce using rule 8 (finins -> .)
    $end            reduce using rule 8 (finins -> .)

    finins                         shift and go to state 13

state 6

    (6) instruccion -> definicion_asignacion_instr . finins
    (7) finins -> . SALTOLINEA
    (8) finins -> .

    SALTOLINEA      shift and go to state 12
    error           reduce using rule 8 (finins -> .)
    RPRINT          reduce using rule 8 (finins -> .)
    ID              reduce using rule 8 (finins -> .)
    $end            reduce using rule 8 (finins -> .)

    finins                         shift and go to state 14

state 7

    (9) instruccion -> error . finins
    (7) finins -> . SALTOLINEA
    (8) finins -> .

    SALTOLINEA      shift and go to state 12
    error           reduce using rule 8 (finins -> .)
    RPRINT          reduce using rule 8 (finins -> .)
    ID              reduce using rule 8 (finins -> .)
    $end            reduce using rule 8 (finins -> .)

    finins                         shift and go to state 15

state 8

    (10) print_instr -> RPRINT . PARIZQ expres_lista PARDER

    PARIZQ          shift and go to state 16


state 9

    (11) asignacion_instr -> ID . EQUALS expresion
    (12) definicion_asignacion_instr -> ID . DOSPUNTOS tipo EQUALS expresion

    EQUALS          shift and go to state 17
    DOSPUNTOS       shift and go to state 18


state 10

    (2) instrucciones -> instrucciones instruccion .

    error           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RPRINT          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 11

    (4) instruccion -> print_instr finins .

    error           reduce using rule 4 (instruccion -> print_instr finins .)
    RPRINT          reduce using rule 4 (instruccion -> print_instr finins .)
    ID              reduce using rule 4 (instruccion -> print_instr finins .)
    $end            reduce using rule 4 (instruccion -> print_instr finins .)


state 12

    (7) finins -> SALTOLINEA .

    error           reduce using rule 7 (finins -> SALTOLINEA .)
    RPRINT          reduce using rule 7 (finins -> SALTOLINEA .)
    ID              reduce using rule 7 (finins -> SALTOLINEA .)
    $end            reduce using rule 7 (finins -> SALTOLINEA .)


state 13

    (5) instruccion -> asignacion_instr finins .

    error           reduce using rule 5 (instruccion -> asignacion_instr finins .)
    RPRINT          reduce using rule 5 (instruccion -> asignacion_instr finins .)
    ID              reduce using rule 5 (instruccion -> asignacion_instr finins .)
    $end            reduce using rule 5 (instruccion -> asignacion_instr finins .)


state 14

    (6) instruccion -> definicion_asignacion_instr finins .

    error           reduce using rule 6 (instruccion -> definicion_asignacion_instr finins .)
    RPRINT          reduce using rule 6 (instruccion -> definicion_asignacion_instr finins .)
    ID              reduce using rule 6 (instruccion -> definicion_asignacion_instr finins .)
    $end            reduce using rule 6 (instruccion -> definicion_asignacion_instr finins .)


state 15

    (9) instruccion -> error finins .

    error           reduce using rule 9 (instruccion -> error finins .)
    RPRINT          reduce using rule 9 (instruccion -> error finins .)
    ID              reduce using rule 9 (instruccion -> error finins .)
    $end            reduce using rule 9 (instruccion -> error finins .)


state 16

    (10) print_instr -> RPRINT PARIZQ . expres_lista PARDER
    (22) expres_lista -> . expres_lista COMA expresion
    (23) expres_lista -> . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expres_lista                   shift and go to state 20
    expresion                      shift and go to state 21
    expresion_number               shift and go to state 22

state 17

    (11) asignacion_instr -> ID EQUALS . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 30
    expresion_number               shift and go to state 22

state 18

    (12) definicion_asignacion_instr -> ID DOSPUNTOS . tipo EQUALS expresion
    (29) tipo -> . RINT
    (30) tipo -> . RFLOAT
    (31) tipo -> . RBOOL

    RINT            shift and go to state 32
    RFLOAT          shift and go to state 33
    RBOOL           shift and go to state 34

    tipo                           shift and go to state 31

state 19

    (24) expresion -> PARIZQ . expresion PARDER
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 35
    expresion_number               shift and go to state 22

state 20

    (10) print_instr -> RPRINT PARIZQ expres_lista . PARDER
    (22) expres_lista -> expres_lista . COMA expresion

    PARDER          shift and go to state 36
    COMA            shift and go to state 37


state 21

    (23) expres_lista -> expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PARDER          reduce using rule 23 (expres_lista -> expresion .)
    COMA            reduce using rule 23 (expres_lista -> expresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42
    OR              shift and go to state 43
    AND             shift and go to state 44


state 22

    (18) expresion -> expresion_number .

    PLUS            reduce using rule 18 (expresion -> expresion_number .)
    MINUS           reduce using rule 18 (expresion -> expresion_number .)
    POR             reduce using rule 18 (expresion -> expresion_number .)
    DIVIDE          reduce using rule 18 (expresion -> expresion_number .)
    MODULATE        reduce using rule 18 (expresion -> expresion_number .)
    OR              reduce using rule 18 (expresion -> expresion_number .)
    AND             reduce using rule 18 (expresion -> expresion_number .)
    PARDER          reduce using rule 18 (expresion -> expresion_number .)
    COMA            reduce using rule 18 (expresion -> expresion_number .)
    SALTOLINEA      reduce using rule 18 (expresion -> expresion_number .)
    error           reduce using rule 18 (expresion -> expresion_number .)
    RPRINT          reduce using rule 18 (expresion -> expresion_number .)
    ID              reduce using rule 18 (expresion -> expresion_number .)
    $end            reduce using rule 18 (expresion -> expresion_number .)


state 23

    (21) expresion -> NOT . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 45
    expresion_number               shift and go to state 22

state 24

    (25) expresion -> CADENA .

    PLUS            reduce using rule 25 (expresion -> CADENA .)
    MINUS           reduce using rule 25 (expresion -> CADENA .)
    POR             reduce using rule 25 (expresion -> CADENA .)
    DIVIDE          reduce using rule 25 (expresion -> CADENA .)
    MODULATE        reduce using rule 25 (expresion -> CADENA .)
    OR              reduce using rule 25 (expresion -> CADENA .)
    AND             reduce using rule 25 (expresion -> CADENA .)
    PARDER          reduce using rule 25 (expresion -> CADENA .)
    COMA            reduce using rule 25 (expresion -> CADENA .)
    SALTOLINEA      reduce using rule 25 (expresion -> CADENA .)
    error           reduce using rule 25 (expresion -> CADENA .)
    RPRINT          reduce using rule 25 (expresion -> CADENA .)
    ID              reduce using rule 25 (expresion -> CADENA .)
    $end            reduce using rule 25 (expresion -> CADENA .)


state 25

    (26) expresion -> RTRUE .

    PLUS            reduce using rule 26 (expresion -> RTRUE .)
    MINUS           reduce using rule 26 (expresion -> RTRUE .)
    POR             reduce using rule 26 (expresion -> RTRUE .)
    DIVIDE          reduce using rule 26 (expresion -> RTRUE .)
    MODULATE        reduce using rule 26 (expresion -> RTRUE .)
    OR              reduce using rule 26 (expresion -> RTRUE .)
    AND             reduce using rule 26 (expresion -> RTRUE .)
    PARDER          reduce using rule 26 (expresion -> RTRUE .)
    COMA            reduce using rule 26 (expresion -> RTRUE .)
    SALTOLINEA      reduce using rule 26 (expresion -> RTRUE .)
    error           reduce using rule 26 (expresion -> RTRUE .)
    RPRINT          reduce using rule 26 (expresion -> RTRUE .)
    ID              reduce using rule 26 (expresion -> RTRUE .)
    $end            reduce using rule 26 (expresion -> RTRUE .)


state 26

    (27) expresion -> RFALSE .

    PLUS            reduce using rule 27 (expresion -> RFALSE .)
    MINUS           reduce using rule 27 (expresion -> RFALSE .)
    POR             reduce using rule 27 (expresion -> RFALSE .)
    DIVIDE          reduce using rule 27 (expresion -> RFALSE .)
    MODULATE        reduce using rule 27 (expresion -> RFALSE .)
    OR              reduce using rule 27 (expresion -> RFALSE .)
    AND             reduce using rule 27 (expresion -> RFALSE .)
    PARDER          reduce using rule 27 (expresion -> RFALSE .)
    COMA            reduce using rule 27 (expresion -> RFALSE .)
    SALTOLINEA      reduce using rule 27 (expresion -> RFALSE .)
    error           reduce using rule 27 (expresion -> RFALSE .)
    RPRINT          reduce using rule 27 (expresion -> RFALSE .)
    ID              reduce using rule 27 (expresion -> RFALSE .)
    $end            reduce using rule 27 (expresion -> RFALSE .)


state 27

    (28) expresion -> ID .

    PLUS            reduce using rule 28 (expresion -> ID .)
    MINUS           reduce using rule 28 (expresion -> ID .)
    POR             reduce using rule 28 (expresion -> ID .)
    DIVIDE          reduce using rule 28 (expresion -> ID .)
    MODULATE        reduce using rule 28 (expresion -> ID .)
    OR              reduce using rule 28 (expresion -> ID .)
    AND             reduce using rule 28 (expresion -> ID .)
    PARDER          reduce using rule 28 (expresion -> ID .)
    COMA            reduce using rule 28 (expresion -> ID .)
    SALTOLINEA      reduce using rule 28 (expresion -> ID .)
    error           reduce using rule 28 (expresion -> ID .)
    RPRINT          reduce using rule 28 (expresion -> ID .)
    ID              reduce using rule 28 (expresion -> ID .)
    $end            reduce using rule 28 (expresion -> ID .)


state 28

    (32) expresion_number -> INTEGER .

    PLUS            reduce using rule 32 (expresion_number -> INTEGER .)
    MINUS           reduce using rule 32 (expresion_number -> INTEGER .)
    POR             reduce using rule 32 (expresion_number -> INTEGER .)
    DIVIDE          reduce using rule 32 (expresion_number -> INTEGER .)
    MODULATE        reduce using rule 32 (expresion_number -> INTEGER .)
    OR              reduce using rule 32 (expresion_number -> INTEGER .)
    AND             reduce using rule 32 (expresion_number -> INTEGER .)
    PARDER          reduce using rule 32 (expresion_number -> INTEGER .)
    COMA            reduce using rule 32 (expresion_number -> INTEGER .)
    SALTOLINEA      reduce using rule 32 (expresion_number -> INTEGER .)
    error           reduce using rule 32 (expresion_number -> INTEGER .)
    RPRINT          reduce using rule 32 (expresion_number -> INTEGER .)
    ID              reduce using rule 32 (expresion_number -> INTEGER .)
    $end            reduce using rule 32 (expresion_number -> INTEGER .)


state 29

    (33) expresion_number -> FLOAT .

    PLUS            reduce using rule 33 (expresion_number -> FLOAT .)
    MINUS           reduce using rule 33 (expresion_number -> FLOAT .)
    POR             reduce using rule 33 (expresion_number -> FLOAT .)
    DIVIDE          reduce using rule 33 (expresion_number -> FLOAT .)
    MODULATE        reduce using rule 33 (expresion_number -> FLOAT .)
    OR              reduce using rule 33 (expresion_number -> FLOAT .)
    AND             reduce using rule 33 (expresion_number -> FLOAT .)
    PARDER          reduce using rule 33 (expresion_number -> FLOAT .)
    COMA            reduce using rule 33 (expresion_number -> FLOAT .)
    SALTOLINEA      reduce using rule 33 (expresion_number -> FLOAT .)
    error           reduce using rule 33 (expresion_number -> FLOAT .)
    RPRINT          reduce using rule 33 (expresion_number -> FLOAT .)
    ID              reduce using rule 33 (expresion_number -> FLOAT .)
    $end            reduce using rule 33 (expresion_number -> FLOAT .)


state 30

    (11) asignacion_instr -> ID EQUALS expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    SALTOLINEA      reduce using rule 11 (asignacion_instr -> ID EQUALS expresion .)
    error           reduce using rule 11 (asignacion_instr -> ID EQUALS expresion .)
    RPRINT          reduce using rule 11 (asignacion_instr -> ID EQUALS expresion .)
    ID              reduce using rule 11 (asignacion_instr -> ID EQUALS expresion .)
    $end            reduce using rule 11 (asignacion_instr -> ID EQUALS expresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42
    OR              shift and go to state 43
    AND             shift and go to state 44


state 31

    (12) definicion_asignacion_instr -> ID DOSPUNTOS tipo . EQUALS expresion

    EQUALS          shift and go to state 46


state 32

    (29) tipo -> RINT .

    EQUALS          reduce using rule 29 (tipo -> RINT .)


state 33

    (30) tipo -> RFLOAT .

    EQUALS          reduce using rule 30 (tipo -> RFLOAT .)


state 34

    (31) tipo -> RBOOL .

    EQUALS          reduce using rule 31 (tipo -> RBOOL .)


state 35

    (24) expresion -> PARIZQ expresion . PARDER
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PARDER          shift and go to state 47
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42
    OR              shift and go to state 43
    AND             shift and go to state 44


state 36

    (10) print_instr -> RPRINT PARIZQ expres_lista PARDER .

    SALTOLINEA      reduce using rule 10 (print_instr -> RPRINT PARIZQ expres_lista PARDER .)
    error           reduce using rule 10 (print_instr -> RPRINT PARIZQ expres_lista PARDER .)
    RPRINT          reduce using rule 10 (print_instr -> RPRINT PARIZQ expres_lista PARDER .)
    ID              reduce using rule 10 (print_instr -> RPRINT PARIZQ expres_lista PARDER .)
    $end            reduce using rule 10 (print_instr -> RPRINT PARIZQ expres_lista PARDER .)


state 37

    (22) expres_lista -> expres_lista COMA . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 48
    expresion_number               shift and go to state 22

state 38

    (13) expresion -> expresion PLUS . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 49
    expresion_number               shift and go to state 22

state 39

    (14) expresion -> expresion MINUS . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 50
    expresion_number               shift and go to state 22

state 40

    (15) expresion -> expresion POR . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 51
    expresion_number               shift and go to state 22

state 41

    (16) expresion -> expresion DIVIDE . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 52
    expresion_number               shift and go to state 22

state 42

    (17) expresion -> expresion MODULATE . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 53
    expresion_number               shift and go to state 22

state 43

    (19) expresion -> expresion OR . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 54
    expresion_number               shift and go to state 22

state 44

    (20) expresion -> expresion AND . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 55
    expresion_number               shift and go to state 22

state 45

    (21) expresion -> NOT expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    OR              reduce using rule 21 (expresion -> NOT expresion .)
    AND             reduce using rule 21 (expresion -> NOT expresion .)
    PARDER          reduce using rule 21 (expresion -> NOT expresion .)
    COMA            reduce using rule 21 (expresion -> NOT expresion .)
    SALTOLINEA      reduce using rule 21 (expresion -> NOT expresion .)
    error           reduce using rule 21 (expresion -> NOT expresion .)
    RPRINT          reduce using rule 21 (expresion -> NOT expresion .)
    ID              reduce using rule 21 (expresion -> NOT expresion .)
    $end            reduce using rule 21 (expresion -> NOT expresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42

  ! PLUS            [ reduce using rule 21 (expresion -> NOT expresion .) ]
  ! MINUS           [ reduce using rule 21 (expresion -> NOT expresion .) ]
  ! POR             [ reduce using rule 21 (expresion -> NOT expresion .) ]
  ! DIVIDE          [ reduce using rule 21 (expresion -> NOT expresion .) ]
  ! MODULATE        [ reduce using rule 21 (expresion -> NOT expresion .) ]
  ! OR              [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 46

    (12) definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS . expresion
    (13) expresion -> . expresion PLUS expresion
    (14) expresion -> . expresion MINUS expresion
    (15) expresion -> . expresion POR expresion
    (16) expresion -> . expresion DIVIDE expresion
    (17) expresion -> . expresion MODULATE expresion
    (18) expresion -> . expresion_number
    (19) expresion -> . expresion OR expresion
    (20) expresion -> . expresion AND expresion
    (21) expresion -> . NOT expresion
    (24) expresion -> . PARIZQ expresion PARDER
    (25) expresion -> . CADENA
    (26) expresion -> . RTRUE
    (27) expresion -> . RFALSE
    (28) expresion -> . ID
    (32) expresion_number -> . INTEGER
    (33) expresion_number -> . FLOAT

    NOT             shift and go to state 23
    PARIZQ          shift and go to state 19
    CADENA          shift and go to state 24
    RTRUE           shift and go to state 25
    RFALSE          shift and go to state 26
    ID              shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29

    expresion                      shift and go to state 56
    expresion_number               shift and go to state 22

state 47

    (24) expresion -> PARIZQ expresion PARDER .

    PLUS            reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    MINUS           reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    POR             reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    DIVIDE          reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    MODULATE        reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    OR              reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    AND             reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    PARDER          reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    COMA            reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    SALTOLINEA      reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    error           reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    RPRINT          reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    ID              reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)
    $end            reduce using rule 24 (expresion -> PARIZQ expresion PARDER .)


state 48

    (22) expres_lista -> expres_lista COMA expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PARDER          reduce using rule 22 (expres_lista -> expres_lista COMA expresion .)
    COMA            reduce using rule 22 (expres_lista -> expres_lista COMA expresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42
    OR              shift and go to state 43
    AND             shift and go to state 44


state 49

    (13) expresion -> expresion PLUS expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PLUS            reduce using rule 13 (expresion -> expresion PLUS expresion .)
    MINUS           reduce using rule 13 (expresion -> expresion PLUS expresion .)
    OR              reduce using rule 13 (expresion -> expresion PLUS expresion .)
    AND             reduce using rule 13 (expresion -> expresion PLUS expresion .)
    PARDER          reduce using rule 13 (expresion -> expresion PLUS expresion .)
    COMA            reduce using rule 13 (expresion -> expresion PLUS expresion .)
    SALTOLINEA      reduce using rule 13 (expresion -> expresion PLUS expresion .)
    error           reduce using rule 13 (expresion -> expresion PLUS expresion .)
    RPRINT          reduce using rule 13 (expresion -> expresion PLUS expresion .)
    ID              reduce using rule 13 (expresion -> expresion PLUS expresion .)
    $end            reduce using rule 13 (expresion -> expresion PLUS expresion .)
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42

  ! POR             [ reduce using rule 13 (expresion -> expresion PLUS expresion .) ]
  ! DIVIDE          [ reduce using rule 13 (expresion -> expresion PLUS expresion .) ]
  ! MODULATE        [ reduce using rule 13 (expresion -> expresion PLUS expresion .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! OR              [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 50

    (14) expresion -> expresion MINUS expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PLUS            reduce using rule 14 (expresion -> expresion MINUS expresion .)
    MINUS           reduce using rule 14 (expresion -> expresion MINUS expresion .)
    OR              reduce using rule 14 (expresion -> expresion MINUS expresion .)
    AND             reduce using rule 14 (expresion -> expresion MINUS expresion .)
    PARDER          reduce using rule 14 (expresion -> expresion MINUS expresion .)
    COMA            reduce using rule 14 (expresion -> expresion MINUS expresion .)
    SALTOLINEA      reduce using rule 14 (expresion -> expresion MINUS expresion .)
    error           reduce using rule 14 (expresion -> expresion MINUS expresion .)
    RPRINT          reduce using rule 14 (expresion -> expresion MINUS expresion .)
    ID              reduce using rule 14 (expresion -> expresion MINUS expresion .)
    $end            reduce using rule 14 (expresion -> expresion MINUS expresion .)
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42

  ! POR             [ reduce using rule 14 (expresion -> expresion MINUS expresion .) ]
  ! DIVIDE          [ reduce using rule 14 (expresion -> expresion MINUS expresion .) ]
  ! MODULATE        [ reduce using rule 14 (expresion -> expresion MINUS expresion .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! OR              [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 51

    (15) expresion -> expresion POR expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PLUS            reduce using rule 15 (expresion -> expresion POR expresion .)
    MINUS           reduce using rule 15 (expresion -> expresion POR expresion .)
    POR             reduce using rule 15 (expresion -> expresion POR expresion .)
    DIVIDE          reduce using rule 15 (expresion -> expresion POR expresion .)
    MODULATE        reduce using rule 15 (expresion -> expresion POR expresion .)
    OR              reduce using rule 15 (expresion -> expresion POR expresion .)
    AND             reduce using rule 15 (expresion -> expresion POR expresion .)
    PARDER          reduce using rule 15 (expresion -> expresion POR expresion .)
    COMA            reduce using rule 15 (expresion -> expresion POR expresion .)
    SALTOLINEA      reduce using rule 15 (expresion -> expresion POR expresion .)
    error           reduce using rule 15 (expresion -> expresion POR expresion .)
    RPRINT          reduce using rule 15 (expresion -> expresion POR expresion .)
    ID              reduce using rule 15 (expresion -> expresion POR expresion .)
    $end            reduce using rule 15 (expresion -> expresion POR expresion .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MODULATE        [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 52

    (16) expresion -> expresion DIVIDE expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PLUS            reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    MINUS           reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    POR             reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    DIVIDE          reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    MODULATE        reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    OR              reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    AND             reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    PARDER          reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    COMA            reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    SALTOLINEA      reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    error           reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    RPRINT          reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    ID              reduce using rule 16 (expresion -> expresion DIVIDE expresion .)
    $end            reduce using rule 16 (expresion -> expresion DIVIDE expresion .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MODULATE        [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 53

    (17) expresion -> expresion MODULATE expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    PLUS            reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    MINUS           reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    POR             reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    DIVIDE          reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    MODULATE        reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    OR              reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    AND             reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    PARDER          reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    COMA            reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    SALTOLINEA      reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    error           reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    RPRINT          reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    ID              reduce using rule 17 (expresion -> expresion MODULATE expresion .)
    $end            reduce using rule 17 (expresion -> expresion MODULATE expresion .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! POR             [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! MODULATE        [ shift and go to state 42 ]
  ! OR              [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 54

    (19) expresion -> expresion OR expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    OR              reduce using rule 19 (expresion -> expresion OR expresion .)
    PARDER          reduce using rule 19 (expresion -> expresion OR expresion .)
    COMA            reduce using rule 19 (expresion -> expresion OR expresion .)
    SALTOLINEA      reduce using rule 19 (expresion -> expresion OR expresion .)
    error           reduce using rule 19 (expresion -> expresion OR expresion .)
    RPRINT          reduce using rule 19 (expresion -> expresion OR expresion .)
    ID              reduce using rule 19 (expresion -> expresion OR expresion .)
    $end            reduce using rule 19 (expresion -> expresion OR expresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42
    AND             shift and go to state 44

  ! PLUS            [ reduce using rule 19 (expresion -> expresion OR expresion .) ]
  ! MINUS           [ reduce using rule 19 (expresion -> expresion OR expresion .) ]
  ! POR             [ reduce using rule 19 (expresion -> expresion OR expresion .) ]
  ! DIVIDE          [ reduce using rule 19 (expresion -> expresion OR expresion .) ]
  ! MODULATE        [ reduce using rule 19 (expresion -> expresion OR expresion .) ]
  ! AND             [ reduce using rule 19 (expresion -> expresion OR expresion .) ]
  ! OR              [ shift and go to state 43 ]


state 55

    (20) expresion -> expresion AND expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    OR              reduce using rule 20 (expresion -> expresion AND expresion .)
    AND             reduce using rule 20 (expresion -> expresion AND expresion .)
    PARDER          reduce using rule 20 (expresion -> expresion AND expresion .)
    COMA            reduce using rule 20 (expresion -> expresion AND expresion .)
    SALTOLINEA      reduce using rule 20 (expresion -> expresion AND expresion .)
    error           reduce using rule 20 (expresion -> expresion AND expresion .)
    RPRINT          reduce using rule 20 (expresion -> expresion AND expresion .)
    ID              reduce using rule 20 (expresion -> expresion AND expresion .)
    $end            reduce using rule 20 (expresion -> expresion AND expresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42

  ! PLUS            [ reduce using rule 20 (expresion -> expresion AND expresion .) ]
  ! MINUS           [ reduce using rule 20 (expresion -> expresion AND expresion .) ]
  ! POR             [ reduce using rule 20 (expresion -> expresion AND expresion .) ]
  ! DIVIDE          [ reduce using rule 20 (expresion -> expresion AND expresion .) ]
  ! MODULATE        [ reduce using rule 20 (expresion -> expresion AND expresion .) ]
  ! OR              [ shift and go to state 43 ]
  ! AND             [ shift and go to state 44 ]


state 56

    (12) definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion .
    (13) expresion -> expresion . PLUS expresion
    (14) expresion -> expresion . MINUS expresion
    (15) expresion -> expresion . POR expresion
    (16) expresion -> expresion . DIVIDE expresion
    (17) expresion -> expresion . MODULATE expresion
    (19) expresion -> expresion . OR expresion
    (20) expresion -> expresion . AND expresion

    SALTOLINEA      reduce using rule 12 (definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion .)
    error           reduce using rule 12 (definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion .)
    RPRINT          reduce using rule 12 (definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion .)
    ID              reduce using rule 12 (definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion .)
    $end            reduce using rule 12 (definicion_asignacion_instr -> ID DOSPUNTOS tipo EQUALS expresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    POR             shift and go to state 40
    DIVIDE          shift and go to state 41
    MODULATE        shift and go to state 42
    OR              shift and go to state 43
    AND             shift and go to state 44

