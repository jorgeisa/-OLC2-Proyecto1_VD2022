Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENMUL
    COMMENUNI
    DOSPUNTOS
    EQUALS
    FLOAT
    INTEGER

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print_instr finins
Rule 5     finins -> SALTOLINEA
Rule 6     finins -> <empty>
Rule 7     instruccion -> error finins
Rule 8     print_instr -> RPRINT PARIZQ expresion PARDER
Rule 9     expresion -> CADENA
Rule 10    expresion -> ID
Rule 11    expresion -> expresion PLUS expresion
Rule 12    expresion -> expresion MINUS expresion
Rule 13    expresion -> expresion POR expresion
Rule 14    expresion -> expresion DIVIDE expresion
Rule 15    expresion -> expresion MODULATE expresion

Terminals, with rules where they appear

CADENA               : 9
COMMENMUL            : 
COMMENUNI            : 
DIVIDE               : 14
DOSPUNTOS            : 
EQUALS               : 
FLOAT                : 
ID                   : 10
INTEGER              : 
MINUS                : 12
MODULATE             : 15
PARDER               : 8
PARIZQ               : 8
PLUS                 : 11
POR                  : 13
RPRINT               : 8
SALTOLINEA           : 5
error                : 7

Nonterminals, with rules where they appear

expresion            : 8 11 11 12 12 13 13 14 14 15 15
finins               : 4 7
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2
print_instr          : 4

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_instr finins
    (7) instruccion -> . error finins
    (8) print_instr -> . RPRINT PARIZQ expresion PARDER

    error           shift and go to state 5
    RPRINT          shift and go to state 6

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print_instr                    shift and go to state 4

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_instr finins
    (7) instruccion -> . error finins
    (8) print_instr -> . RPRINT PARIZQ expresion PARDER

    $end            reduce using rule 1 (init -> instrucciones .)
    error           shift and go to state 5
    RPRINT          shift and go to state 6

    instruccion                    shift and go to state 7
    print_instr                    shift and go to state 4

state 3

    (3) instrucciones -> instruccion .

    error           reduce using rule 3 (instrucciones -> instruccion .)
    RPRINT          reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print_instr . finins
    (5) finins -> . SALTOLINEA
    (6) finins -> .

    SALTOLINEA      shift and go to state 9
    error           reduce using rule 6 (finins -> .)
    RPRINT          reduce using rule 6 (finins -> .)
    $end            reduce using rule 6 (finins -> .)

    finins                         shift and go to state 8

state 5

    (7) instruccion -> error . finins
    (5) finins -> . SALTOLINEA
    (6) finins -> .

    SALTOLINEA      shift and go to state 9
    error           reduce using rule 6 (finins -> .)
    RPRINT          reduce using rule 6 (finins -> .)
    $end            reduce using rule 6 (finins -> .)

    finins                         shift and go to state 10

state 6

    (8) print_instr -> RPRINT . PARIZQ expresion PARDER

    PARIZQ          shift and go to state 11


state 7

    (2) instrucciones -> instrucciones instruccion .

    error           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RPRINT          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 8

    (4) instruccion -> print_instr finins .

    error           reduce using rule 4 (instruccion -> print_instr finins .)
    RPRINT          reduce using rule 4 (instruccion -> print_instr finins .)
    $end            reduce using rule 4 (instruccion -> print_instr finins .)


state 9

    (5) finins -> SALTOLINEA .

    error           reduce using rule 5 (finins -> SALTOLINEA .)
    RPRINT          reduce using rule 5 (finins -> SALTOLINEA .)
    $end            reduce using rule 5 (finins -> SALTOLINEA .)


state 10

    (7) instruccion -> error finins .

    error           reduce using rule 7 (instruccion -> error finins .)
    RPRINT          reduce using rule 7 (instruccion -> error finins .)
    $end            reduce using rule 7 (instruccion -> error finins .)


state 11

    (8) print_instr -> RPRINT PARIZQ . expresion PARDER
    (9) expresion -> . CADENA
    (10) expresion -> . ID
    (11) expresion -> . expresion PLUS expresion
    (12) expresion -> . expresion MINUS expresion
    (13) expresion -> . expresion POR expresion
    (14) expresion -> . expresion DIVIDE expresion
    (15) expresion -> . expresion MODULATE expresion

    CADENA          shift and go to state 13
    ID              shift and go to state 14

    expresion                      shift and go to state 12

state 12

    (8) print_instr -> RPRINT PARIZQ expresion . PARDER
    (11) expresion -> expresion . PLUS expresion
    (12) expresion -> expresion . MINUS expresion
    (13) expresion -> expresion . POR expresion
    (14) expresion -> expresion . DIVIDE expresion
    (15) expresion -> expresion . MODULATE expresion

    PARDER          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    POR             shift and go to state 18
    DIVIDE          shift and go to state 19
    MODULATE        shift and go to state 20


state 13

    (9) expresion -> CADENA .

    PARDER          reduce using rule 9 (expresion -> CADENA .)
    PLUS            reduce using rule 9 (expresion -> CADENA .)
    MINUS           reduce using rule 9 (expresion -> CADENA .)
    POR             reduce using rule 9 (expresion -> CADENA .)
    DIVIDE          reduce using rule 9 (expresion -> CADENA .)
    MODULATE        reduce using rule 9 (expresion -> CADENA .)


state 14

    (10) expresion -> ID .

    PARDER          reduce using rule 10 (expresion -> ID .)
    PLUS            reduce using rule 10 (expresion -> ID .)
    MINUS           reduce using rule 10 (expresion -> ID .)
    POR             reduce using rule 10 (expresion -> ID .)
    DIVIDE          reduce using rule 10 (expresion -> ID .)
    MODULATE        reduce using rule 10 (expresion -> ID .)


state 15

    (8) print_instr -> RPRINT PARIZQ expresion PARDER .

    SALTOLINEA      reduce using rule 8 (print_instr -> RPRINT PARIZQ expresion PARDER .)
    error           reduce using rule 8 (print_instr -> RPRINT PARIZQ expresion PARDER .)
    RPRINT          reduce using rule 8 (print_instr -> RPRINT PARIZQ expresion PARDER .)
    $end            reduce using rule 8 (print_instr -> RPRINT PARIZQ expresion PARDER .)


state 16

    (11) expresion -> expresion PLUS . expresion
    (9) expresion -> . CADENA
    (10) expresion -> . ID
    (11) expresion -> . expresion PLUS expresion
    (12) expresion -> . expresion MINUS expresion
    (13) expresion -> . expresion POR expresion
    (14) expresion -> . expresion DIVIDE expresion
    (15) expresion -> . expresion MODULATE expresion

    CADENA          shift and go to state 13
    ID              shift and go to state 14

    expresion                      shift and go to state 21

state 17

    (12) expresion -> expresion MINUS . expresion
    (9) expresion -> . CADENA
    (10) expresion -> . ID
    (11) expresion -> . expresion PLUS expresion
    (12) expresion -> . expresion MINUS expresion
    (13) expresion -> . expresion POR expresion
    (14) expresion -> . expresion DIVIDE expresion
    (15) expresion -> . expresion MODULATE expresion

    CADENA          shift and go to state 13
    ID              shift and go to state 14

    expresion                      shift and go to state 22

state 18

    (13) expresion -> expresion POR . expresion
    (9) expresion -> . CADENA
    (10) expresion -> . ID
    (11) expresion -> . expresion PLUS expresion
    (12) expresion -> . expresion MINUS expresion
    (13) expresion -> . expresion POR expresion
    (14) expresion -> . expresion DIVIDE expresion
    (15) expresion -> . expresion MODULATE expresion

    CADENA          shift and go to state 13
    ID              shift and go to state 14

    expresion                      shift and go to state 23

state 19

    (14) expresion -> expresion DIVIDE . expresion
    (9) expresion -> . CADENA
    (10) expresion -> . ID
    (11) expresion -> . expresion PLUS expresion
    (12) expresion -> . expresion MINUS expresion
    (13) expresion -> . expresion POR expresion
    (14) expresion -> . expresion DIVIDE expresion
    (15) expresion -> . expresion MODULATE expresion

    CADENA          shift and go to state 13
    ID              shift and go to state 14

    expresion                      shift and go to state 24

state 20

    (15) expresion -> expresion MODULATE . expresion
    (9) expresion -> . CADENA
    (10) expresion -> . ID
    (11) expresion -> . expresion PLUS expresion
    (12) expresion -> . expresion MINUS expresion
    (13) expresion -> . expresion POR expresion
    (14) expresion -> . expresion DIVIDE expresion
    (15) expresion -> . expresion MODULATE expresion

    CADENA          shift and go to state 13
    ID              shift and go to state 14

    expresion                      shift and go to state 25

state 21

    (11) expresion -> expresion PLUS expresion .
    (11) expresion -> expresion . PLUS expresion
    (12) expresion -> expresion . MINUS expresion
    (13) expresion -> expresion . POR expresion
    (14) expresion -> expresion . DIVIDE expresion
    (15) expresion -> expresion . MODULATE expresion

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULATE resolved as shift
    PARDER          reduce using rule 11 (expresion -> expresion PLUS expresion .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    POR             shift and go to state 18
    DIVIDE          shift and go to state 19
    MODULATE        shift and go to state 20

  ! PLUS            [ reduce using rule 11 (expresion -> expresion PLUS expresion .) ]
  ! MINUS           [ reduce using rule 11 (expresion -> expresion PLUS expresion .) ]
  ! POR             [ reduce using rule 11 (expresion -> expresion PLUS expresion .) ]
  ! DIVIDE          [ reduce using rule 11 (expresion -> expresion PLUS expresion .) ]
  ! MODULATE        [ reduce using rule 11 (expresion -> expresion PLUS expresion .) ]


state 22

    (12) expresion -> expresion MINUS expresion .
    (11) expresion -> expresion . PLUS expresion
    (12) expresion -> expresion . MINUS expresion
    (13) expresion -> expresion . POR expresion
    (14) expresion -> expresion . DIVIDE expresion
    (15) expresion -> expresion . MODULATE expresion

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULATE resolved as shift
    PARDER          reduce using rule 12 (expresion -> expresion MINUS expresion .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    POR             shift and go to state 18
    DIVIDE          shift and go to state 19
    MODULATE        shift and go to state 20

  ! PLUS            [ reduce using rule 12 (expresion -> expresion MINUS expresion .) ]
  ! MINUS           [ reduce using rule 12 (expresion -> expresion MINUS expresion .) ]
  ! POR             [ reduce using rule 12 (expresion -> expresion MINUS expresion .) ]
  ! DIVIDE          [ reduce using rule 12 (expresion -> expresion MINUS expresion .) ]
  ! MODULATE        [ reduce using rule 12 (expresion -> expresion MINUS expresion .) ]


state 23

    (13) expresion -> expresion POR expresion .
    (11) expresion -> expresion . PLUS expresion
    (12) expresion -> expresion . MINUS expresion
    (13) expresion -> expresion . POR expresion
    (14) expresion -> expresion . DIVIDE expresion
    (15) expresion -> expresion . MODULATE expresion

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULATE resolved as shift
    PARDER          reduce using rule 13 (expresion -> expresion POR expresion .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    POR             shift and go to state 18
    DIVIDE          shift and go to state 19
    MODULATE        shift and go to state 20

  ! PLUS            [ reduce using rule 13 (expresion -> expresion POR expresion .) ]
  ! MINUS           [ reduce using rule 13 (expresion -> expresion POR expresion .) ]
  ! POR             [ reduce using rule 13 (expresion -> expresion POR expresion .) ]
  ! DIVIDE          [ reduce using rule 13 (expresion -> expresion POR expresion .) ]
  ! MODULATE        [ reduce using rule 13 (expresion -> expresion POR expresion .) ]


state 24

    (14) expresion -> expresion DIVIDE expresion .
    (11) expresion -> expresion . PLUS expresion
    (12) expresion -> expresion . MINUS expresion
    (13) expresion -> expresion . POR expresion
    (14) expresion -> expresion . DIVIDE expresion
    (15) expresion -> expresion . MODULATE expresion

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULATE resolved as shift
    PARDER          reduce using rule 14 (expresion -> expresion DIVIDE expresion .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    POR             shift and go to state 18
    DIVIDE          shift and go to state 19
    MODULATE        shift and go to state 20

  ! PLUS            [ reduce using rule 14 (expresion -> expresion DIVIDE expresion .) ]
  ! MINUS           [ reduce using rule 14 (expresion -> expresion DIVIDE expresion .) ]
  ! POR             [ reduce using rule 14 (expresion -> expresion DIVIDE expresion .) ]
  ! DIVIDE          [ reduce using rule 14 (expresion -> expresion DIVIDE expresion .) ]
  ! MODULATE        [ reduce using rule 14 (expresion -> expresion DIVIDE expresion .) ]


state 25

    (15) expresion -> expresion MODULATE expresion .
    (11) expresion -> expresion . PLUS expresion
    (12) expresion -> expresion . MINUS expresion
    (13) expresion -> expresion . POR expresion
    (14) expresion -> expresion . DIVIDE expresion
    (15) expresion -> expresion . MODULATE expresion

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for POR resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULATE resolved as shift
    PARDER          reduce using rule 15 (expresion -> expresion MODULATE expresion .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    POR             shift and go to state 18
    DIVIDE          shift and go to state 19
    MODULATE        shift and go to state 20

  ! PLUS            [ reduce using rule 15 (expresion -> expresion MODULATE expresion .) ]
  ! MINUS           [ reduce using rule 15 (expresion -> expresion MODULATE expresion .) ]
  ! POR             [ reduce using rule 15 (expresion -> expresion MODULATE expresion .) ]
  ! DIVIDE          [ reduce using rule 15 (expresion -> expresion MODULATE expresion .) ]
  ! MODULATE        [ reduce using rule 15 (expresion -> expresion MODULATE expresion .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 21 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 21 resolved as shift
WARNING: shift/reduce conflict for POR in state 21 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 21 resolved as shift
WARNING: shift/reduce conflict for MODULATE in state 21 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for POR in state 22 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 22 resolved as shift
WARNING: shift/reduce conflict for MODULATE in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for POR in state 23 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 23 resolved as shift
WARNING: shift/reduce conflict for MODULATE in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for POR in state 24 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 24 resolved as shift
WARNING: shift/reduce conflict for MODULATE in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for POR in state 25 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 25 resolved as shift
WARNING: shift/reduce conflict for MODULATE in state 25 resolved as shift
